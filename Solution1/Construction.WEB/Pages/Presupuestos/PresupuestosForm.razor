@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm Model="presupuestos" OnValidSubmit="OnValidSubmit" ReturnAction="Return">

    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>Valor De Mano Obra:</label>
        <div>
            <InputNumber @bind-Value="presupuestos.CostoManoObra"/>
            <ValidationMessage For="@(()=>presupuestos.CostoManoObra)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Valor Materiales:</label>
        <div>
            <InputNumber @bind-Value="presupuestos.CostoMateriales" />
            <ValidationMessage For="@(()=>presupuestos.CostoMateriales)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Costo Maquinarias:</label>
        <div>
            <InputNumber @bind-Value="presupuestos.CostoMaquinas" />
            <ValidationMessage For="@(()=>presupuestos.CostoMaquinas)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Valor Proyecto:</label>
        <div>
            <InputNumber @bind-Value="presupuestos.CostoProyecto" />
            <ValidationMessage For="@(()=>presupuestos.CostoProyecto)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Costo De Las Tareas:</label>
        <div>
            <InputNumber @bind-Value="presupuestos.CostoTarea" />
            <ValidationMessage For="@(()=>presupuestos.CostoTarea)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-info" type="reset">Limpiar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editContext = null!;
    protected override void OnInitialized()
    {
        editContext = new(presupuestos);
    }


    [EditorRequired]
    [Parameter]
    public Presupuesto presupuestos { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


    public bool FormularioPosteadoConExito { get; set; } = false;



    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormularioPosteadoConExito)
        {
            return;
        }

        var resultado = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}
