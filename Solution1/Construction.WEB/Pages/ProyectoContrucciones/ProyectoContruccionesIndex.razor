@page "/proyectoContrucciones"
@using Construction.Shared.Entidades
@using Construction.WEB.Repositories
@using Construction.WEB.Shared
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h1>Proyecto Construcciones</h1>

<div class="card">
    <div class="card-header">
        <span>
            
            <a class="btn btn-primary btn-sm float-end" href="/ProyectoContruccion/create"> Nuevo Proyecto </a>

        </span>
    </div>

    <div class="card-body">
        <GenericList MyList="ProyectoContrucciones">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Listado Proyecto Construcciones </th>
                        </tr>
                    </thead>
                    <thead>
                        <tr>
                            <th> </th>
                            <th> Id </th>
                            <th>Nombre Proyecto</th>
                            <th>Ubicacion del Proyecto</th>
                            <th>Descripcion del Proyecto</th>
                            <th>Fecha De Inicio del Proyecto</th>
                            <th>Fecha De Finalizacion del Proyecto</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ProyectoContrucciones)
                        {
                            <tr>
                                <td>
                                    <a href="/ProyectoContruccion/edit/@item.Id" class="btn btn-sm btn-warning" > Editar </a>
                                    <button @onclick=@(() => DeleteAsync(item)) class="btn btn-sm btn-danger"> Borrar </button>
                                </td>
                                <td>
                                    @item.Id
                                </td>
                                <td>
                                    @item.Nombre
                                </td>
                                <td>
                                    @item.Ubicacion
                                </td>
                                <td>
                                    @item.Descripcion
                                </td>
                                <td>
                                    @item.FechaInicio
                                </td>
                                <td>
                                    @item.FechaAproxFin
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
    </div>


@code {
    public List<ProyectoConstruccion> ProyectoContrucciones { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<ProyectoConstruccion>>("/api/ProyectoConstrucciones");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        ProyectoContrucciones = responseHttp.Response;
    }
    private async Task DeleteAsync(ProyectoConstruccion proyectoConstruccion)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar el proyecto contruccion: {proyectoConstruccion.Nombre}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<ProyectoConstruccion>($"api/ProyectoConstrucciones/id:int?id={proyectoConstruccion.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("proyectoContrucciones");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }


}
